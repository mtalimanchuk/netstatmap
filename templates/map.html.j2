<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"/>
  <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/whatwg-fetch@3.0.0/dist/fetch.umd.min.js"></script>
  <style>
    html, body {width: 100%;height: 100%;margin: 0;padding: 0;}
    #mapid {
      position: relative;
      width: 100.0%;
      height: 100.0%;
      left: 0.0%;
      top: 0.0%;
    }

    .cssIcon {
    }

    .rhomboidIcon {
        border: 3px solid #ffffff;
        height: 15px;
        width: 15px;
        transform: rotate(45deg);
        background-color: rgba(255, 255, 255, 0.2);
    }

    .rhomboidIcon:hover {
        background-color: rgba(255, 255, 255, 0.7);
        transform: rotate(0deg);
    }
  </style>
  <title>Netstatmap</title>
</head>
<body>
    <div id="mapid"></div>
    <script>
    my_lat = {{ my_lat }};
    my_lon = {{ my_lon }};

    // http://leaflet-extras.github.io/leaflet-providers/preview/index.html
    tilesUrl = "https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png";
    tilesAttribution = "Map tiles by Carto, under CC BY 3.0. Data by \u0026copy; \u003ca href=\"http://openstreetmap.org\"\u003eOpenStreetMap\u003c/a\u003e, under \u003ca href=\"http://www.openstreetmap.org/copyright\"\u003eODbL\u003c/a\u003e.";
    tiles = L.tileLayer(
        tilesUrl,
        {"attribution": tilesAttribution, "detectRetina": false, "maxNativeZoom": 18, "maxZoom": 10, "minZoom": 0, "noWrap": false, "opacity": 1, "subdomains": "abc", "tms": false}
    );
 
    var baseMaps = {
        "Dark": tiles,
    };

    var overlayMaps = {
        //processes will be here
    };
    myDesc = "<span style=\"font-family: 'Lucida Console', Monaco, monospace;\">" + {{ my_desc|tojson }} + "</span>";
    myMarker = L.circleMarker([my_lat, my_lon], {radius: 10, color: "#ffffff"})
    .bindTooltip(myDesc);
    netstatmap = L.map('mapid', {
        layers: [tiles, myMarker],
        zoom: 3,
        })
        .setView([my_lat, my_lon]);

    layerControl = L.control.layers(baseMaps, overlayMaps, {collapsed: false, hideSingleBase: true, position: "topleft"}).addTo(netstatmap);
    var currentProcLayers = [];
    var interval = 15 * 1000;

    window.onload = updateMap();

    function updateMap() {
        var url = {{ url_for('update')|tojson }};
        var knownProcs = {};
        currentProcLayers.forEach(proc => knownProcs[proc.globalPid] = proc.procHash);
        fetch(url, {
            method: 'POST',
            body: JSON.stringify(knownProcs)
        })
        .then(parseJSON)
        .then(setNewMarkers);
        setTimeout(updateMap, interval);
    };

    function parseJSON(response) {
        r = response.json();
        console.log(r);
        return r
    };

    function setNewMarkers(payload) {
        console.log("Receiving new markers data:");
        console.log(payload);
        newMarkers = payload[0];
        newProcGroups = payload[1];

        currentProcLayers.forEach(function(oldProc, i) {
            if (newProcGroups.filter(newProc => newProc.procHash === oldProc.procHash).length === 0) {
                oldProc.layerGroup.remove();
                layerControl.removeLayer(oldProc.layerGroup);
                currentProcLayers.splice(i, 1);
            }
        });

        newProcGroups.forEach(function(newProc) {
            existingProcLayer = currentProcLayers.filter(oldProc => oldProc.procHash === newProc.procHash);
            if (existingProcLayer.length > 0) {
                currentProcLayer = existingProcLayer[0].layerGroup;
            } else {
                currentProcLayer = new L.layerGroup();
                currentProcLayers = [...currentProcLayers, {procHash: newProc.procHash, globalPid: newProc.globalPid, layerGroup: currentProcLayer}];
                currentProcLayer.addTo(netstatmap);
                
                overlayName = "<span style=\"color: #" + newProc.procHash + "; font-family: 'Lucida Console', Monaco, monospace; text-shadow: 1px 1px 0.7px #000000;\"><b>" + newProc.globalPid + "</b></span>";
                layerControl.addOverlay(currentProcLayer, overlayName);
            };
            currentProcLayer.clearLayers();
            currentProcMarkers = newMarkers.filter(m => m.procHash === newProc.procHash);
            currentProcMarkers.forEach(function(m) {
                let lineTooltip = "<span style=\"font-family: 'Lucida Console', Monaco, monospace;\">" + m.city + ", " + m.region + ". " + m.country + "</span>";
                let groupPopup = "<span style=\"font-family: 'Lucida Console', Monaco, monospace;\">" + m.desc + "</span>";
                let myIcon = L.divIcon({
                    iconSize: [20, 20],
                    tooltipAnchor: [10, 20],
                    popupAnchor: [0, -50],
                    className: "cssIcon",
                    html: "<div class=\"rhomboidIcon\"></div>",
                });
                marker = L.marker([m.lat, m.lon], {
                    //fillColor: "#" + m.procHash,
                    icon: myIcon,
                    });
                polyline = L.polyline([[my_lat, my_lon], [m.lat, m.lon]], {color: '#' + m.procHash});
                connectionFeatureGroup = L.featureGroup([marker, polyline])
                .bindPopup(groupPopup)
                .bindTooltip(lineTooltip)
                .addTo(currentProcLayer);
            });

        });
    };

    </script>
</body>
</html>